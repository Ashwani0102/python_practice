# #Square root using while loop
sq_number=16
i=1
while True:
    if i*i==sq_number:  
        print(i)
        break
    i=i+1

#Square root search using binary
sq_number=25
i=0
j=sq_number
while i<=j:
    mid=(i+j)//2
    if mid*mid==sq_number:
        print(mid)
        break
    elif mid*mid<sq_number:
        i=mid+1
    else: 
        j=mid-1

#Index finding using for loop
li=[5,4,7,9,11,2]
target_number=7
for i in range(0,len(li)):
    if li[i]==target_number:
        break
print("Index of 7 is",i)

#Index finding using binary_search
li=[1,2,3,4,5,6,]
target_number=3
i=0
j=len(li)-1
while i<=j:
    mid=(i+j)//2
    if li[mid]==target_number:
        print(mid)
        break
    elif li[mid] < target_number:
        i=mid
    else: 
        j=mid

# Find whether given number is exist in that list or not and in which index
li=[1,3,5,7,9,14]
target=int(input("Enter the number to search : "))
i=0
j=len(li)-1
while i<=j:
    mid=(i+j)//2
    if li[mid]==target:
        print("The index of",target,"is",mid)
        break
    elif li[mid]<target:
        i=mid+1
    else:
        j=mid-1    
else:
    print("Number doesn't exist in list") 

# Find the index if number is sorted but not unique"
li=[1,1,2,2,3,4,5,5,6,7,7]
target=int(input("Enter the number to search index(Only between 1 to 7)"))
i=0
j=len(li)-1
while i<=j:
    mid=(i+j)//2
    if li[mid]==target:
        print(mid)
        break
    elif li[mid]<target:
        i=mid+1
    else:
        j=mid-1 

# Index finding of peak value using while loop
li=[1,2,3,2,1]
i=0
while li[i]<li[i+1]:
    i=i+1
print(i) 

# Index finding using binary search of peak value
li=[1,2,3,4,5,6,7,6,5,3,2]
i=0
j=len(li)-1
while i<j:
    mid=(i+j)//2
    if li[mid]<li[mid+1]:
        i=mid+1
    else:
        j=mid
print(j) 
print(li[i]) 

# Index of number whose double also exist in the same array
li=[2,3,4,7,11]
n=len(li)
for i in range(n):
    target=2*li[i]
    left=0
    right=n-1
    while left<=right:
        mid=(left+right)//2
        if li[mid]==target:
            print(i)
            break
        elif li[mid]<target:
            left=mid+1
        else:
            right=mid-1 
